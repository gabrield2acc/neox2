name: iOS CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - 'release-*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select latest available Xcode
        run: |
          set -e
          for X in \
            "/Applications/Xcode_16.3.app/Contents/Developer" \
            "/Applications/Xcode_16.2.app/Contents/Developer" \
            "/Applications/Xcode_16.1.app/Contents/Developer" \
            "/Applications/Xcode_16.0.app/Contents/Developer" \
            "/Applications/Xcode_15.4.app/Contents/Developer" \
            "/Applications/Xcode.app/Contents/Developer"; do
            if [ -d "$X" ]; then
              sudo xcode-select -s "$X"
              break
            fi
          done
          xcodebuild -version

      - name: Install XcodeGen
        run: |
          brew update
          brew install xcodegen

      - name: Remove existing Xcode project (ensure clean format)
        run: |
          rm -rf NeoX2.xcodeproj

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Build (Simulator)
        run: |
          xcodebuild -project NeoX2.xcodeproj \
            -scheme NeoX2 \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -configuration Debug \
            build | xcpretty || true

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-14
    needs: [ build ]
    env:
      BUNDLE_ID: net.acloudradius.neox2
    steps:
      - uses: actions/checkout@v4

      - name: Select latest available Xcode
        run: |
          set -e
          for X in \
            "/Applications/Xcode_16.3.app/Contents/Developer" \
            "/Applications/Xcode_16.2.app/Contents/Developer" \
            "/Applications/Xcode_16.1.app/Contents/Developer" \
            "/Applications/Xcode_16.0.app/Contents/Developer" \
            "/Applications/Xcode_15.4.app/Contents/Developer" \
            "/Applications/Xcode.app/Contents/Developer"; do
            if [ -d "$X" ]; then
              sudo xcode-select -s "$X"
              break
            fi
          done
          xcodebuild -version

      - name: Install XcodeGen
        run: |
          brew update
          brew install xcodegen

      - name: Remove existing Xcode project (ensure clean format)
        run: |
          rm -rf NeoX2.xcodeproj

      - name: Generate Xcode project
        run: xcodegen generate

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          keychain: build.keychain-db
          keychain-password: temporary_keychain_password_${{ github.run_id }}
          p12-file-base64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Set build keychain as default (codesign)
        run: |
          BUILD_KEYCHAIN="$HOME/Library/Keychains/build.keychain-db"
          security list-keychains -s "$BUILD_KEYCHAIN" || true
          security default-keychain -s "$BUILD_KEYCHAIN" || true
          security show-keychain-info "$BUILD_KEYCHAIN" || true

      - name: Install Provisioning Profile
        env:
          PROVISIONING_PROFILE: ${{ secrets.PROVISIONING_PROFILE }}
        run: |
          set -euo pipefail
          PROFILE_DIR="$HOME/Library/MobileDevice/Provisioning Profiles"
          mkdir -p "$PROFILE_DIR"
          TMP_PROFILE="$PROFILE_DIR/profile.mobileprovision"
          # Support base64 or raw .mobileprovision in the secret
          if echo "$PROVISIONING_PROFILE" | base64 -d > "$TMP_PROFILE" 2>/dev/null; then
            echo "Decoded base64 provisioning profile to $TMP_PROFILE"
          else
            echo "$PROVISIONING_PROFILE" > "$TMP_PROFILE"
            echo "Wrote raw provisioning profile to $TMP_PROFILE"
          fi
          /usr/bin/security cms -D -i "$TMP_PROFILE" > profile.plist
          PROFILE_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' profile.plist)
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist)
          TEAM_ID=$(/usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' profile.plist)
          echo "PROFILE_NAME=$PROFILE_NAME" >> $GITHUB_ENV
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "TEAM_ID=$TEAM_ID" >> $GITHUB_ENV
          PROFILE_PATH="$PROFILE_DIR/$PROFILE_UUID.mobileprovision"
          mv -f "$TMP_PROFILE" "$PROFILE_PATH"
          rm -f profile.plist

      - name: Signing diagnostics (safe)
        run: |
          echo "Xcode version:" && xcodebuild -version
          echo "Codesigning identities (hash masked):"
          security find-identity -v -p codesigning 2>/dev/null | sed -E 's/[A-F0-9]{40}/<SHA1>/g' || true
          echo "Installed provisioning profiles:"
          for f in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            [[ -e "$f" ]] || continue
            echo "--- $f ---"
            /usr/bin/security cms -D -i "$f" > profile.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :Name' profile.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :UUID' profile.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' profile.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' profile.plist 2>/dev/null || true
            rm -f profile.plist
          done

      - name: Show build settings (Release)
        run: |
          xcodebuild -project NeoX2.xcodeproj -scheme NeoX2 -configuration Release -showBuildSettings | sed -n '1,200p'

      - name: Archive
        env:
          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
        run: |
          set -euxo pipefail
          mkdir -p build
          BUILD_KEYCHAIN="$HOME/Library/Keychains/build.keychain-db"
          echo "Before: default keychain:" && security default-keychain || true
          security default-keychain -s "$BUILD_KEYCHAIN" || true
          echo "After: default keychain:" && security default-keychain || true
          if command -v xcpretty >/dev/null 2>&1; then
            xcodebuild -project NeoX2.xcodeproj \
              -scheme NeoX2 \
              -configuration Release \
              -archivePath "$PWD/build/NeoX2.xcarchive" \
              -destination 'generic/platform=iOS' \
              -allowProvisioningUpdates \
              CODE_SIGN_STYLE=Manual \
              CODE_SIGNING_ALLOWED=YES \
              CODE_SIGNING_REQUIRED=YES \
              OTHER_CODE_SIGN_FLAGS="--keychain $BUILD_KEYCHAIN" \
              DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
              CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
              PROVISIONING_PROFILE="$PROFILE_UUID" \
              clean archive | xcpretty
          else
            xcodebuild -project NeoX2.xcodeproj \
              -scheme NeoX2 \
              -configuration Release \
              -archivePath "$PWD/build/NeoX2.xcarchive" \
              -destination 'generic/platform=iOS' \
              -allowProvisioningUpdates \
              CODE_SIGN_STYLE=Manual \
              CODE_SIGNING_ALLOWED=YES \
              CODE_SIGNING_REQUIRED=YES \
              OTHER_CODE_SIGN_FLAGS="--keychain $BUILD_KEYCHAIN" \
              DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
              CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
              PROVISIONING_PROFILE_SPECIFIER="$PROFILE_NAME" \
              PROVISIONING_PROFILE="$PROFILE_UUID" \
              clean archive
          fi
          test -d "$PWD/build/NeoX2.xcarchive"

      - name: Inspect archive provisioning profile (safe)
        run: |
          APP_PATH="$PWD/build/NeoX2.xcarchive/Products/Applications/NeoX2.app"
          if [[ -f "$APP_PATH/embedded.mobileprovision" ]]; then
            /usr/bin/security cms -D -i "$APP_PATH/embedded.mobileprovision" > embedded.plist || true
            echo "Archive embedded profile info:"
            /usr/libexec/PlistBuddy -c 'Print :Name' embedded.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :UUID' embedded.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :TeamIdentifier:0' embedded.plist 2>/dev/null || true
            /usr/libexec/PlistBuddy -c 'Print :Entitlements:application-identifier' embedded.plist 2>/dev/null || true
            EMBEDDED_NAME=$(/usr/libexec/PlistBuddy -c 'Print :Name' embedded.plist 2>/dev/null || true)
            EMBEDDED_UUID=$(/usr/libexec/PlistBuddy -c 'Print :UUID' embedded.plist 2>/dev/null || true)
            echo "EMBEDDED_NAME=$EMBEDDED_NAME" >> $GITHUB_ENV
            echo "EMBEDDED_UUID=$EMBEDDED_UUID" >> $GITHUB_ENV
            rm -f embedded.plist
          else
            echo "No embedded.mobileprovision found in archive app bundle" >&2
          fi

      - name: Embed provisioning profile into archive app bundle
        run: |
          set -e
          APP_PATH="$PWD/build/NeoX2.xcarchive/Products/Applications/NeoX2.app"
          PROFILE_PATH="$HOME/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"
          if [[ -d "$APP_PATH" && -f "$PROFILE_PATH" ]]; then
            cp "$PROFILE_PATH" "$APP_PATH/embedded.mobileprovision"
            echo "Embedded provisioning profile into app bundle"
          else
            echo "App path or provisioning profile missing; cannot embed" >&2
            ls -lah "$HOME/Library/MobileDevice/Provisioning Profiles" || true
          fi

      - name: Show codesign entitlements (safe)
        run: |
          APP_PATH="$PWD/build/NeoX2.xcarchive/Products/Applications/NeoX2.app"
          if [[ -d "$APP_PATH" ]]; then
            /usr/bin/codesign -d --entitlements :- "$APP_PATH" 2>/dev/null || true
          fi

      - name: Export IPA
        env:
          TEAM_ID: ${{ env.TEAM_ID }}
          PROFILE_NAME: ${{ env.PROFILE_NAME }}
          EMBEDDED_NAME: ${{ env.EMBEDDED_NAME }}
        run: |
          set -euo pipefail
          FINAL_PROFILE_NAME="${EMBEDDED_NAME:-$PROFILE_NAME}"
          if [[ -z "$FINAL_PROFILE_NAME" ]]; then echo "No profile NAME available for export" >&2; exit 1; fi
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>
                ${BUNDLE_ID}
              </key>
              <string>${FINAL_PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          PLIST
          echo "ExportOptions.plist:" && cat ExportOptions.plist
          if command -v xcpretty >/dev/null 2>&1; then
            xcodebuild -exportArchive -allowProvisioningUpdates -archivePath "$PWD/build/NeoX2.xcarchive" -exportPath "$PWD/build" -exportOptionsPlist ExportOptions.plist | xcpretty
          else
            xcodebuild -exportArchive -allowProvisioningUpdates -archivePath "$PWD/build/NeoX2.xcarchive" -exportPath "$PWD/build" -exportOptionsPlist ExportOptions.plist
          fi
          echo "Exported files:" && ls -lah "$PWD/build" || true
          IPA_PATH=$(find "$PWD/build" -maxdepth 1 -name "*.ipa" -print -quit)
          if [[ -z "$IPA_PATH" ]]; then echo "No IPA produced" >&2; exit 1; fi
          echo "IPA_PATH=$IPA_PATH" >> $GITHUB_ENV

      - name: Setup App Store Connect API key (optional)
        env:
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_PRIVATE_KEY: ${{ secrets.APPLE_PRIVATE_KEY }}
        run: |
          if [[ -n "$APPLE_KEY_ID" && -n "$APPLE_ISSUER_ID" && -n "$APPLE_PRIVATE_KEY" ]]; then
            mkdir -p ~/.appstoreconnect/private_keys
            FILE=~/.appstoreconnect/private_keys/AuthKey_${APPLE_KEY_ID}.p8
            if echo "$APPLE_PRIVATE_KEY" | base64 -d > "$FILE" 2>/dev/null; then
              echo "Wrote base64-decoded API private key to $FILE"
            else
              echo "$APPLE_PRIVATE_KEY" > "$FILE"
              echo "Wrote raw API private key to $FILE"
            fi
            chmod 600 "$FILE"
          else
            echo "No App Store Connect API key secrets provided; will upload using Apple ID."
          fi
      - name: Verify IPA exists
        run: |
          ls -lah build || true
          test -f "$IPA_PATH"

      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
        run: |
          set -e
          echo "Transporter version:" || true
          xcrun iTMSTransporter -version || true
          if [[ -n "$APPLE_KEY_ID" && -n "$APPLE_ISSUER_ID" ]]; then
            echo "Using App Store Connect API Key for upload via Transporter"
            xcrun iTMSTransporter -m upload -apiKey "$APPLE_KEY_ID" -apiIssuer "$APPLE_ISSUER_ID" -assetFile "$IPA_PATH" -v detailed -verbose
          else
            echo "Using Apple ID + app-specific password for upload via Transporter"
            if ! xcrun iTMSTransporter -m upload -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD" -assetFile "$IPA_PATH" -v detailed -verbose; then
              echo "Transporter upload failed; attempting legacy altool as fallback (deprecated)" >&2
              xcrun altool --upload-app --verbose -f "$IPA_PATH" -t ios -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD"
            fi
          fi
