name: iOS CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
      - 'release-*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer" || sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"

      - name: Build (Simulator)
        run: |
          xcodebuild -project NeoX2.xcodeproj \
            -scheme NeoX2 \
            -destination 'platform=iOS Simulator,name=iPhone 15' \
            -configuration Debug \
            build | xcpretty || true

  release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: macos-14
    needs: [ build ]
    env:
      BUNDLE_ID: net.acloudradius.neox2
    steps:
      - uses: actions/checkout@v4

      - name: Select Xcode
        run: sudo xcode-select -s "/Applications/Xcode_15.4.app/Contents/Developer" || sudo xcode-select -s "/Applications/Xcode.app/Contents/Developer"

      - name: Import signing certificate
        uses: apple-actions/import-codesign-certs@v2
        with:
          keychain: build.keychain-db
          keychain-password: temporary_keychain_password_${{ github.run_id }}
          p12-file-base64: ${{ secrets.APPLE_DISTRIBUTION_CERTIFICATE }}
          p12-password: ${{ secrets.CERTIFICATE_PASSWORD }}

      - name: Install Provisioning Profile
        env:
          PROFILE_BASE64: ${{ secrets.PROVISIONING_PROFILE }}
          PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          echo "$PROFILE_BASE64" | base64 --decode > ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_NAME.mobileprovision

      - name: Archive
        env:
          CODE_SIGN_IDENTITY: ${{ secrets.CODE_SIGN_IDENTITY }}
          DEVELOPMENT_TEAM: ${{ secrets.DEVELOPMENT_TEAM }}
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          xcodebuild -project NeoX2.xcodeproj \
            -scheme NeoX2 \
            -configuration Release \
            -archivePath $PWD/build/NeoX2.xcarchive \
            CODE_SIGN_STYLE=Manual \
            DEVELOPMENT_TEAM=$DEVELOPMENT_TEAM \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            PROVISIONING_PROFILE_SPECIFIER="$PROVISIONING_PROFILE_NAME" \
            clean archive | xcpretty || true

      - name: Export IPA
        env:
          PROVISIONING_PROFILE_NAME: ${{ secrets.PROVISIONING_PROFILE_NAME }}
        run: |
          cat > ExportOptions.plist <<PLIST
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>
                ${BUNDLE_ID}
              </key>
              <string>${PROVISIONING_PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key>
            <true/>
            <key>compileBitcode</key>
            <false/>
          </dict>
          </plist>
          PLIST
          xcodebuild -exportArchive -archivePath $PWD/build/NeoX2.xcarchive -exportPath $PWD/build -exportOptionsPlist ExportOptions.plist | xcpretty || true

      - name: Setup App Store Connect API key (optional)
        env:
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
          APPLE_PRIVATE_KEY: ${{ secrets.APPLE_PRIVATE_KEY }}
        run: |
          if [[ -n "$APPLE_KEY_ID" && -n "$APPLE_ISSUER_ID" && -n "$APPLE_PRIVATE_KEY" ]]; then
            mkdir -p ~/.appstoreconnect/private_keys
            FILE=~/.appstoreconnect/private_keys/AuthKey_${APPLE_KEY_ID}.p8
            if echo "$APPLE_PRIVATE_KEY" | base64 -d > "$FILE" 2>/dev/null; then
              echo "Wrote base64-decoded API private key to $FILE"
            else
              echo "$APPLE_PRIVATE_KEY" > "$FILE"
              echo "Wrote raw API private key to $FILE"
            fi
            chmod 600 "$FILE"
          else
            echo "No App Store Connect API key secrets provided; will upload using Apple ID."
          fi
      - name: Verify IPA exists
        run: |
          ls -lah build || true
          test -f build/NeoX2.ipa

      - name: Upload to TestFlight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_KEY_ID: ${{ secrets.APPLE_KEY_ID }}
          APPLE_ISSUER_ID: ${{ secrets.APPLE_ISSUER_ID }}
        run: |
          set -e
          echo "Transporter version:" || true
          xcrun iTMSTransporter -version || true
          if [[ -n "$APPLE_KEY_ID" && -n "$APPLE_ISSUER_ID" ]]; then
            echo "Using App Store Connect API Key for upload via Transporter"
            xcrun iTMSTransporter -m upload -apiKey "$APPLE_KEY_ID" -apiIssuer "$APPLE_ISSUER_ID" -assetFile build/NeoX2.ipa -v informational
          else
            echo "Using Apple ID + app-specific password for upload via Transporter"
            if ! xcrun iTMSTransporter -m upload -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD" -assetFile build/NeoX2.ipa -v informational; then
              echo "Transporter upload failed; attempting legacy altool as fallback (deprecated)" >&2
              xcrun altool --upload-app -f build/NeoX2.ipa -t ios -u "$APPLE_ID" -p "$APPLE_APP_SPECIFIC_PASSWORD"
            fi
          fi
